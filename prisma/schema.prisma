// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  pets          Pet[]
  accounts      Account[]
  sessions      Session[]
  likes         Like[]
  comments      Comment[]
  following     Follow[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Pet {
  id          String    @id @default(cuid())
  name        String
  type        String    // dog, cat, etc.
  description String?
  image       String?
  qrCode      String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  locations   Location[]
  feeds       Feed[]
  posts       Post[]
  followers   Follow[]
}

model Location {
  id        String   @id @default(cuid())
  latitude  Float
  longitude Float
  timestamp DateTime @default(now())
  petId     String
  pet       Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
}

model Feed {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  notes     String?
  petId     String
  pet       Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
}

model Post {
  id        String    @id @default(cuid())
  image     String
  caption   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  petId     String
  pet       Pet       @relation(fields: [petId], references: [id], onDelete: Cascade)
  likes     Like[]
  comments  Comment[]

  @@index([petId])
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
}

model Follow {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  petId     String
  pet       Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@unique([userId, petId])
  @@index([userId])
  @@index([petId])
}
